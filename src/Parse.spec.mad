import { Left, Right } from "Either"
import File from "File"
import { always } from "Function"
import IO from "IO"
import Test from "Test"
import Wish from "Wish"

import { Digraph, LinkedNode, Node, digraph, linkedNode } from "@/Parse"
import P from "@/Parsimony"
import { parseTest, report, testParser } from "@/Test"



assertEquals = Test.assertEquals
test = Test.test
TestError = Test.Error

parseTest("linkedNode - semicolon", linkedNode, "yo -> hey;", LinkedNode("yo", "hey"))
parseTest("linkedNode - nosemicolon", linkedNode, "yo -> hey\n", LinkedNode("yo", "hey"))
parseTest(
  "digraph - basic inline",
  digraph,
  `digraph G { root -> branch; branch -> branch2; branch2 -> branch3; }`,
  Digraph(
    "G",
    [
      LinkedNode("root", "branch"),
      LinkedNode("branch", "branch2"),
      LinkedNode("branch2", "branch3"),
    ],
  ),
)
parseTest(
  "digraph - simple with semicolons",
  digraph,
  `Digraph myCoolGraph {
  root -> branch;
  branch -> leaf1;
  branch -> leaf2;
  root -> leaf3;
  hey;
}`,
  Digraph(
    "myCoolGraph",
    [
      LinkedNode("root", "branch"),
      LinkedNode("branch", "leaf1"),
      LinkedNode("branch", "leaf2"),
      LinkedNode("root", "leaf3"),
      Node("hey"),
    ],
  ),
)

parseTest(
  "digraph - simple sans semicolons",
  digraph,
  `digraph dogs {
  dog -> mastiff
  mastiff -> english
  mastiff -> neopolitan
  dog -> akita
  wolf
}`,
  Digraph(
    "dogs",
    [
      LinkedNode("dog", "mastiff"),
      LinkedNode("mastiff", "english"),
      LinkedNode("mastiff", "neopolitan"),
      LinkedNode("dog", "akita"),
      Node("wolf"),
    ],
  ),
)
