import { always } from "Function"
import String from "String"

import { between, stringTill } from "@/Parser/Combinators"
import { ARROW, LINE_END, QUOTES } from "@/Parser/Constants"
import P from "@/Parsimony"



// ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚

export stringified = between(QUOTES, $, QUOTES)
export wrapped = (a, x) => between(a, x, a)

// simple to start is better than nothing forever
export type Attribute = Attribute(String, String)
export type DotPart = Node(String, List Attribute) | Link(String, String)
export alias DotList = List DotPart
export type Graph = Digraph(String, List DotPart)

link :: P.Parser DotPart
export link = do {
  a <- stringTill(ARROW)
  _ <- ARROW
  b <- stringTill(LINE_END)
  _ <- LINE_END
  return of(Link(a, b))
}

node :: P.Parser DotPart
export node = do {
  a <- stringTill(LINE_END)
  _ <- LINE_END
  return of(Node(a, []))
}

stringChar :: P.Parser Char
stringChar = P.choice([
  map(always('"'), P.string("\\\"")),
  map(always('\n'), P.string("\\n")),
  map(always('\t'), P.string("\\t")),
  P.notChar('"'),
])


string :: P.Parser (List Char)
export string = do {
  _ <- P.char('"')
  cs <- P.many(stringChar)
  _ <- P.symbol(`"`)

  return pipe(
    // String.fromList,
    of,
  )(cs)
}

attribute :: P.Parser Attribute
export attribute = do {
  key <- stringTill(P.char('='))
  _ <- P.char('=')
  value <- map(String.fromList, P.choice([string, P.letters]))
  return of(Attribute(key, value))
}

nodeWithAttributes :: P.Parser DotPart
export nodeWithAttributes = do {
  a <- stringTill(P.char('['))
  _ <- P.char('[')
  attrs <- P.maybeSepBy(attribute, P.choice([P.char(' '), P.char(',')]))
  _ <- P.char(']')
  return of(Node(a, attrs))
}

nodule :: P.Parser DotPart
export nodule = P.choice([link, nodeWithAttributes, node])

digraph :: P.Parser Graph
export digraph = do {
  _ <- P.choice([P.symbol("digraph"), P.symbol("Digraph")])
  name <- stringTill(P.char('{'))
  _ <- P.char('{')
  body <- P.token(P.someTill(nodule, P.char('}')))
  _ <- P.char('}')
  return of(Digraph(name, body))
}
